library("readxl")
mtcars=write.table(mtcars, file = "mtcars.txt", sep = " ",row.names = TRUE, col.names = TRUE)
mtcars=write.table(mtcars, file = "mtcars.txt");
write.csv(mtcars, file = "mtcars.csv");
?write.csv
mtcars=write.table(mtcars, file = "mtcars.txt", sep = " ",row.names = FALSE, col.names = TRUE);
write.csv(mtcars, file = "mtcars.csv", row.names = TRUE, col.names = TRUE);
mtcars=write.table(mtcars, file = "mtcars.txt", sep = " ",row.names = FALSE, col.names = TRUE);
write.csv(mtcars, file = "mtcars.csv", row.names = TRUE, col.names = TRUE);
mtcars=write.table(mtcars, file = "mtcars.txt", sep = " ",row.names = FALSE);
write.csv(mtcars, file = "mtcars.csv", row.names = TRUE);
mtcars=write.table(mtcars, file = "mtcars.txt", sep = " ",row.names = FALSE);
write.csv(mtcars, file = "mtcars.csv", row.names = TRUE);
mtcars=write.table(mtcars, file = "mtcars.txt", sep = "\t", row.names = TRUE, col.names = NA); # saved as tab-separated text file
write.csv(mtcars, file = "mtcars.csv", row.names = TRUE,col.names = NA);
mtcars=write.table(mtcars, file = "mtcars.txt", sep = "\t", row.names = TRUE, col.names = NA); # saved as tab-separated text file
write.csv(mtcars, file = "mtcars.csv", row.names = TRUE);
mtcars=write.table(mtcars, file = "mtcars.txt", sep = "\t", row.names = TRUE, col.names = NA); # saved as tab-separated text file
write.csv(mtcars, file = "mtcars.csv");
write.table(mtcars, file = "mtcars.txt", sep = "\t", row.names = TRUE, col.names = NA); # saved as tab-separated text file
write.csv(mtcars, file = "mtcars.csv",row.names = TRUE, col.names = NA);
write.table(mtcars, file = "mtcars.txt", sep = "\t", row.names = TRUE, col.names = NA); # saved as tab-separated text file
write.csv(mtcars, file = "mtcars.csv");
write.table(mtcars, file = "mtcars.txt", sep = "\t", row.names = TRUE, col.names = NA); # saved as tab-separated text file
write.csv(mtcars, file = "mtcars.csv");
names(mtcars);   #list the variables of the data
names(mtcars)
mtcars1$cyl=as.factor(mtcars1$cyl);
Sys.Date( );  # it returns today's date
date();       # it returns the current date and time
help(sqrt); #This asks for information about the sqrt function
?sqrt; #a  shorter way of asking for help
example(sqrt); #This will give some  examples
help(abs); #This asks for information about the sqrt function
?abs; #a  shorter way of asking for help
example(abs); #This will give some  examples
help(sin); #This asks for information about the sqrt function
?sin; #a  shorter way of asking for help
example(sin); #This will give some  examples
x
x=3
x
ls();
ls();
rm(x);  x;
x
y
x = c(8, -3, 2, 6);
where(x<0)
knitr::opts_chunk$set(echo = FALSE)
x = 1:100;
sum(x);
x = 1:1000;
sum(x);
x
x = c(8, -3, 2, 6);
which(x<0)
knitr::opts_chunk$set(echo = FALSE)
k = 20;
if(k > 20){
print(“The number is greater than 20”);
k = 20;
if(k > 20){
print("The number is greater than 20");
} else if (k < 20){
print("The number is less than 20");
} else {
print ("The number is equal to 20");
}
knitr::opts_chunk$set(echo = FALSE)
i=0;
while (i < 5)
{
print ("i is",i);
i=i+1;
}
i=0;
while (i < 5)
{
print(paste("i is", i));
i=i+1;
}
x = 1;
repeat {
print(x);
x = x+1;
if (x == 6){
break
}
}
# sum of the first n integers
summ<-function(n)
{
a=0;
for(i in 1:n)
{a=a+i;}
return(a);
}
summ(10)
knitr::opts_chunk$set(echo = FALSE)
setwd("F:/DataCamp/Day1");
grades = read.csv("grades2.csv",header=TRUE, sep=",");
grades1 = grades[order(Quiz1),];
str(grades1)
str(grades)
grades[order(Quiz1),];
?attach
setwd("F:/DataCamp/Day1");
grades = read.csv("grades2.csv",header=TRUE, sep=",");
attach(grades); #database is searched by R when evaluating a variable, no need to use $
grades1 = grades[order(Quiz1),];
head(grades1);
head(grades1);
grade
exam = read.csv("exam.csv",header=TRUE, sep=",");
grade=merge(quiz,exam,by="ID");
setwd("F:/DataCamp/Day1");
quiz = read.csv("quiz2.csv",header=TRUE, sep=",");
attach(quiz); #database is searched by R when evaluating a
#variable, no need to use
#detach it when it is not in use
quiz1 = quiz[order(Q1),];  #sort by Q1
head(quiz1);
exam = read.csv("exam.csv",header=TRUE, sep=",");
grade=merge(quiz,exam,by="ID");
head(grade);
head(grade);
grade0=subset(grade, complete.cases(grade) == T);
grade0
grade0 = grade[complete.cases(grade), ]; # Keep only the complete rows
#Or use the suset() function
grade0=subset(grade, complete.cases(grade) == T);
str(grade0);
grade0 = grade[complete.cases(grade), ]; # Keep only the complete rows
#Or use the suset() function
grade0=subset(grade, complete.cases(grade) == T);
str(grade0); dim(grade0);
grade[is.na(grade)] = 0;
head(grade); dim(grade);
grade
grades1
keep=c("Q1","Q2","T1","T2"); #Keep these 4 variables only
grade1= subset(grade, select=keep);
str(grade1);
drop=c("Q4","Q5","Q6","T3"); #drop these 4 variables
grade2= subset(grade, select=-drop);
drop=c("Q4","Q5","Q6","T3"); #drop these 4 variables
grade2= subset(grade, select=-c(drop);
grade2= subset(grade, select=-c("Q4","Q5","Q6","T3"));
grade2= subset(grade, select=-c("T3"));
grade2= subset(grade, select=-c(T3));
#drop these 4 variables
str(grade2);
grade2= subset(grade, select=-c(Q4,T3));
#drop these 4 variables
str(grade2);
drop=c(Q4,Q5, Q6,T3);
drop=c(Q4,Q5, Q6,T3);
grade
drop=c(Q4,Q5, Q6,T3);
grade2= subset(grade, select=-c(Q4,Q5, Q6,T3));
#drop these 4 variables
str(grade2);
grade3 = grade[1:5,];  # first 5 observations
grade3;
grade4 = subset(grade, grade$ID >= 31);
# based on variable values
grade4;
grade3
grade4
str(mtcars)
# aggregate data frame mtcars by cyl and hp
# returning means
# for numeric variables only
attach(mtcars);
aggdata =aggregate(mtcars, by=list(cyl,hp),
FUN=mean, na.rm=TRUE);
print(aggdata);
detach(mtcars);
rm(list=ls())
# aggregate data frame mtcars by cyl
# returning means
# for numeric variables only
attach(mtcars);
aggdata =aggregate(mtcars, by=list(cyl),FUN=mean, na.rm=TRUE);
print(aggdata);
detach(mtcars);
grade
knitr::opts_chunk$set(echo = FALSE)
grade5=grade[ , c("Total","Letter")] = NA;
exam = read.csv("exam.csv",header=TRUE, sep=",");
grade=merge(quiz,exam,by="ID");
setwd("F:/DataCamp/Day1");
quiz = read.csv("quiz2.csv",header=TRUE, sep=",");
attach(quiz); #database is searched by R when evaluating a
#variable, no need to use
#detach it when it is not in use
quiz1 = quiz[order(Q1),];  #sort by Q1
head(quiz1);
exam = read.csv("exam.csv",header=TRUE, sep=",");
grade=merge(quiz,exam,by="ID");
head(grade);
grade5=grade[ , c("Total","Letter")] = NA;
# add two more variables with values missing
str(grade5);
grade
grade[ , c("Total","Letter")] = NA;
grade
str(grade5)
grade5
exam = read.csv("exam.csv",header=TRUE, sep=",");
grade=merge(quiz,exam,by="ID");
head(grade);
grade5=grade[ , c("Total","Letter")] = NA;
# add two more variables with values missing
str(grade5);
grade5
?plot
?title
knitr::opts_chunk$set(echo = FALSE)
counts= table(mtcars$cyl);
counts;  #get the count of 4, 6 & 8 cylinder cars
barplot(counts,main="Car Distribution",
xlab="Number of Gears",names.arg=c("4 cyl", "6 cyl", "8 cyl"))
pie(counts)
d = density(mtcars$mpg) # returns the density data
plot(d); # plots the results
box();
d
?pch
knitr::opts_chunk$set(echo = FALSE)
lines(mtcars$wt, mtcars$mpg, main="Line Chart of MPG vs Wt",
xlab="Car Weight ", ylab="Miles Per Gallon ", type = "l");
plot.new();
lines(mtcars$wt, mtcars$mpg, main="Line Chart of MPG vs Wt",
xlab="Car Weight ", ylab="Miles Per Gallon ", type = "l");
box();
plot.new();
lines(mtcars$wt, mtcars$mpg, main="Line Chart of MPG vs Wt",
xlab="Car Weight ", ylab="Miles Per Gallon ", type = "l");
box();
plot.new();
lines(mtcars$wt, mtcars$mpg, main="Line Chart of MPG vs Wt",
xlab="Car Weight ", ylab="Miles Per Gallon ", type = "l");
box();
y = c(1227.3, 1513.1, 1942.1, 2184.7, 2466.6, 2527.6);
x = c(2006, 2011, 2016, 2021, 2026, 2031);
plot(x,y, type="l", xlab="Year", ylab="Population",
xlim=c(2006, 2031), ylim=c(1000, 4000));
box();
?par
par()
knitr::opts_chunk$set(echo = FALSE)
par(mfrow=c(1,2));
hist(mtcars$mpg,  col="blue", xlab="Miles Per Gallon",#breaks = 10,
main="Histogram of MPG");
box();
boxplot(mtcars$mpg, main="Boxplot of MPG",
ylab="Miles Per Gallon"); # Boxplot of MPG
box();
iris
str(iris)
?pairs()
str(mtcars)
??iris
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
library(ggplot2) ## for plotting
library(dplyr) ## for data wrangling functions
library(tidyr) ## for data wrangling functions
library(knitr) ## for tables.
data1 = iris   # ?iris
str(data1);
head(data1);
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
library(ggplot2) ## for plotting
library(dplyr) ## for data wrangling functions
library(tidyr) ## for data wrangling functions
library(knitr) ## for tables.
data1 = iris;   # ?iris
dim(data1);
str(data1);
head(data1);
tail(data1);
counts= table(data1$Species );
barplot(counts, col=c(5,6,7));
counts
data1$Flag = Data1$Sepal.Length>5;
data1$Flag = data1$Sepal.Length>5;
str(data1)
data1$Flag = ifelse(data1$Sepal.Length>5,1,0);
str(data1)
table(data1$Species[DataX$Flag])
table(data1$Species[data1$Flag])
data1$Flag = data1$Sepal.Length>5;
data1$Flag
Species[data1$Flag])
data1$Species[data1$Flag])
data1$Species[data1$Flag]
data1$Flag = data1$Sepal.Length>5; # Add a binary flag, TRUE if Sepal.Length>5, FALSE otherwise.
count1=table(data1$Species[data1$Flag]);  #get the count of 4, 6 & 8 cylinder cars
count1
22+47+49
table(data1$Species, data1$Flag)
knitr::opts_chunk$set(echo = FALSE)
install.packages("RColorBrewer");
library(RColorBrewer);
showCols(bg="gray20",cl=colors()[1:60], rot=30, cex=0.9);
#install.packages("RColorBrewer");
library(RColorBrewer);
showCol(bg="gray20",cl=colors()[1:60], rot=30, cex=0.9);
showCols <- function(cl=colors(), bg = "grey",
cex = 0.75, rot = 30) {
m <- ceiling(sqrt(n <-length(cl)))
length(cl) <- m*m; cm <- matrix(cl, m)
require("grid")
grid.newpage(); vp <- viewport(w = .92, h = .92)
grid.rect(gp=gpar(fill=bg))
grid.text(cm, x = col(cm)/m, y = rev(row(cm))/m, rot = rot,
vp=vp, gp=gpar(cex = cex, col = cm))
}
showCols(bg="gray20",cl=colors()[1:60], rot=30, cex=0.9);
counts= table(mtcars$cyl);
pie(counts,main="Car Distribution",
col=c(2,3,4),names.arg=c("4 cyl", "6 cyl", "8 cyl"));
counts= table(mtcars$cyl);
pie(counts,main="Car Distribution",
col=c(2,3,4), labels=c("4 cyl", "6 cyl", "8 cyl"));
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
paste0("http://rammb.cira.colostate.edu/research/",           "tropical_cyclones/tc_extended_best_track_dataset/",
"data/ebtrk_atlc_1988_2015.txt")
t=paste0("http://rammb.cira.colostate.edu/research/",           "tropical_cyclones/tc_extended_best_track_dataset/",
"data/ebtrk_atlc_1988_2015.txt")
str(iris)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
write.csv(iris, "iris.csv");
students1=read.csv("students1.csv",header=TRUE, sep=",");
students1=read.csv("students2.csv",header=TRUE, sep=",");
dim(students1);
str(students1);
head(students1);
tail(students1);
dim(students2);
students1=read.csv("students1.csv",header=TRUE, sep=",");
students2=read.csv("students2.csv",header=TRUE, sep=",");
dim(students1);
str(students1);
head(students1);
tail(students1);
dim(students2);
str(students2);
head(students2);
tail(students2);
rowSums(is.na(students)); # Number of missing per row
students=merge(students1, students2, by=c("Last.Name","First.Name"), all=TRUE);
str(students);
dim(students);
head(students);
rowSums(is.na(students)); # Number of missing per row
rowSums(is.na(students)); # Number of missing per row
colSums(is.na(students)); # Number of missing per column
# list rows of data that have missing values
students[!complete.cases(students),];
students[!complete.cases(students),];# list rows of data that have missing values
# list rows of data that have missing values
students_new=students[complete.cases(students),];
#The following is another way to remove all missing values
#students_new=subset(students, complete.cases(students) == T);
str(students_new);
students[!complete.cases(new),]; # list rows of data that have missing values
students[!complete.cases(students),];# list rows of data that have missing values
students[!complete.cases(students),];# list rows of data that have missing values
ifelse(students$Gender.y==NA, students$Gender.x, students$Gender.y);
ifelse(students$Gender.y==NA, students$Gender.x, students$Gender.y);
students[!complete.cases(students),];
students=merge(students1, students2, by=c("Last.Name","First.Name"), all=TRUE);
str(students);
dim(students);
head(students);
students$Gender.y=ifelse(students$Gender.y==NA, students$Gender.x, students$Gender.y);
students[!complete.cases(students),];
students$Gender.y=ifelse(students$Gender.y==<NA>, students$Gender.x, students$Gender.y);
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
students$Gender.y=ifelse(is.na(students$Gender.y), NA, students$Gender.y);
students1=read.csv("students1.csv",header=TRUE, sep=",");
students2=read.csv("students2.csv",header=TRUE, sep=",");
dim(students1);
str(students1);
head(students1);
dim(students2);
str(students2);
head(students2);
students=merge(students1, students2, by=c("Last.Name","First.Name"), all=TRUE);
str(students);
dim(students);
head(students);
students$Gender.y=ifelse(is.na(students$Gender.y), NA, students$Gender.y);
#students$Gender.y=ifelse(students$Gender.y=='NA', students$Gender.x, students$Gender.y);
students[!complete.cases(students),];
levels(students$Gender.y)
str(students)
students=merge(students1, students2, by=c("Last.Name","First.Name"), all=TRUE);
str(students);
dim(students);
head(students);
students$Gender.y=ifelse(is.na(students$Gender.y), students$Gender.x, students$Gender.y);
students[!complete.cases(students),];
rm(list=all())
rm(list(all=TRUE)
)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
students1=read.csv("students1.csv",header=TRUE, sep=",");
students2=read.csv("students2.csv",header=TRUE, sep=",");
dim(students1);
str(students1);
head(students1);
dim(students2);
str(students2);
head(students2);
students=merge(students1, students2, by=c("Last.Name","First.Name"), all=TRUE);
str(students);
dim(students);
head(students);
is.na(students$Gender.y)
students$Gender.y=ifelse(is.na(students$Gender.y), 'students$Gender.x', 'students$Gender.y');
students[!complete.cases(students),];
students$Gender.y=ifelse(is.na(students$Gender.y), as.character(students$Gender.x), as.character(students$Gender.y));
students[!complete.cases(students),];
str(students)
students
students$Gender.y=ifelse(is.na(students$Gender.y), as.character(students$Gender.x), as.character(students$Gender.y));
students[!complete.cases(students),];
str(students)
students=merge(students1, students2, by=c("Last.Name","First.Name"), all=TRUE);
str(students);
dim(students);
head(students);
students$Gender.y=ifelse(is.na(students$Gender.y), as.character(students$Gender.x), as.character(students$Gender.y));
students[!complete.cases(students),];
str(students)
students
students
students[!complete.cases(students),];
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
students1=read.csv("students1.csv",header=TRUE, sep=",");
students2=read.csv("students2.csv",header=TRUE, sep=",");
dim(students1);
str(students1);
head(students1);
dim(students2);
str(students2);
head(students2);
students=merge(students1, students2, by=c("Last.Name","First.Name"), all=TRUE);
str(students);
dim(students);
head(students);
students$Gender.y=ifelse(is.na(students$Gender.y), as.character(students$Gender.x), as.character(students$Gender.y));  #use as.character() to avoid Gender.y converted from factor to numerical
students[!complete.cases(students),];
str(students);
students$Gender.y=as.factor(students$Gender.y); # Convert Gender.y to factor
str(students);
students[!complete.cases(students),];
students[6,];
dim(students);
students[6,];
students[students$Last.Name=='DOE03' & students$First.Name=='JOE03',"Grade"] = 80;
students[students$Last.Name=='DOE03' & students$First.Name=='JOE03',"Height"] = 72;
head(students,n=6)
keep=c("Last.Name","First.Name","Gender.x","Age", "SAT"); #Keep these 5 variables only
students_new1= subset(students, select=keep);
str(students_new1);
students_new1[!complete.cases(students_new1),];  #check if there are missing values
# list rows of data that have missing values
students_new=students[complete.cases(students),];
#The following are other way to remove all missing values
#students_new=subset(students, complete.cases(students) == T);
#students_new = na.omit(students);
dim(students_new);
str(students_new);
students[!complete.cases(students_new),]; # list rows of data that have missing values
# list rows of data that have missing values
students_new=students[complete.cases(students),];
#The following are other way to remove all missing values
#students_new=subset(students, complete.cases(students) == T);
#students_new = na.omit(students);
dim(students_new);
str(students_new);
students[!complete.cases(students_new),]; # list rows of data that have missing values
any(students_new$Gender.x!=students_new$Gender.y);
any(students_new$Gender.x!=students_new$Gender.y);  #Check if the two variables are equal
students_new$Gender.y = NULL; #remove the variable Gender.y
str(students_new);
names(students_new)[3] = "Gender";
str(students_new);
students$ID = seq(dim(students)[1]);
str(students);
students_new$SAT
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
knitr::include_graphics("IrisFlower.png")
data1 = iris;   # ?iris
dim(data1);
str(data1);
str(data1);
tail(data1);
tail(data1);
tail(data1);
tail(data1);
head(data1);
head(data1);
head(data1);
tail(data1);
head(data1);
